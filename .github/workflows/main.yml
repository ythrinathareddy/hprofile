#ci pipeline start, code checkout, test, build, scan, publish
name: action test
on: [push,workflow_dispatch]
jobs:
  build:
    runs-on: ubuntu-latest
    permissions: 
      contents: read
      packages: write 
    steps:

      - name: code checkout
        uses: actions/checkout@v4
      - name: set java 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' 
          java-version: '11'

      - name: mavan test
        run: mvn test

      - name: Build with Maven
        run: mvn -B package --file pom.xml

    #  - name: list the current directory
    #    run: ls -a
    #          
    #  - name: Print Contents of the Target Folder
    #    run: |
    #      cd target
    #      pwd
    #      ls -a

## Setup sonar-scanner
 #     - name: Setup SonarQube
 #       uses: warchant/setup-sonar-scanner@v7
## Run sonar-scanner
 #     - name: SonarQube Scan 
 #       run: sonar-scanner 
 #           -Dsonar.host.url=${{ secrets.SONAR_URL }} 
 #           -Dsonar.login=${{ secrets.SONAR_TOKEN }}
 #           -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} 
 #           -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
 #           -Dsonar.source=src/
 #           -Dsonar.junit.reportsPath=target/surefire-reports/ 
 #           -Dsonar.jacoco.reportsPath=target/jacoco.exec 
 #           -Dsonar.java.checkstyle.reportsPath=target/checkstyle-result.xml 
 #           -Dsonar.java.binaries=target/test-classes/com/visualpathit/account
## Check the Quality Gate status.
 #     - name: SonarQube Quality Gate check
 #       id: sonarqube-quality-gate-check
 #       uses: sonarsource/sonarqube-quality-gate-action@master
## Force to fail step after specific time.
 #       timeout-minutes: 5
 #       env:
 #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
 #         SONAR_HOST_URL: ${{ secrets.SONAR_URL }} #OPTIONAL
 #    # Use the variable in the upload artifact step

   
      - name: Publish package
        run: mvn --batch-mode -X deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHP_TOKEN }}

#ci pipeline completed

#cd pipeline start
  #deploy:
  #  needs: build
  #  runs-on: ubuntu-latest
  #  steps: 
  #    - name: Download build artifact
  #      uses: actions/download-artifact@v4
  #      with:
  #        name: vprofile
  #        path: /home/runner/work/hprofile/hprofile/target
  #    - name: show folder structure
  #      run: ls -R
  #    - name: Download Artifact from GitHub
  #      run: |
  #        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o vprofile-v2.war -L "https://github.com/your_github_userythrinathareddy/hprofile/home/runner/work/hprofile/hprofile/target/vprofile-v2.war"
  #      # Update with your GitHub username, repository name, and the correct release tag
#
  #    - name: Deploy to Tomcat
  #      run: |
  #        curl -u admin:3nath@Reddy --upload-file vprofile-v2.war http://192.168.10:8080/u01/tomcat/webapps/manager?path=/vprofile-v2&update=true
  #      # Update with your Tomcat username, password, host, and the correct deployment path 



      
      
      